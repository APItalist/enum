{{- /*gotype: github.com/apitalist/enum.TemplateScope */ -}}
// Code generated by generate-enum. DO NOT EDIT.

package {{ .Package }}

import (
{{ if and (eq .Spec.GenerateJSON true) (ne .RawType "") -}}
{{ range .Imports "fmt" "strings" "encoding/json"}}    "{{ . }}"
{{ end }}{{ else }}{{ range .Imports "fmt" "strings"}}    "{{ . }}"
{{ end }}{{ end }})

{{ if .Spec.GenerateValues -}}
// {{ .Type }}Values returns all possible values for {{ .Type }}.
func {{ .Type }}Values() {{ .Type }}s {
    return {{ .Type }}s{
{{ range $val := .Values }}        {{ $val }},
{{ end }}    }
}

// {{ .Type }}ValueStrings returns all possible values for {{ .Type }} as a string slice.
func {{ .Type }}ValueStrings() []string {
    return []string{
{{ $root := . }}{{ range $val := .Values }}        {{$root.ConvertToString}}{{ $val }}{{ $root.ConvertToStringEnd }},
{{ end }}    }
}
{{- end }}

{{ if .Spec.GenerateValidate -}}
// Validate validates if the specified value {{ .First }} is a valid value for {{ .Type }}.
func ({{ .First }} {{ .Type }}) Validate() error {
    switch {{ .First }} {
{{ range $val := .Values }}    case {{ $val }}:
{{ end }}
    default:
        return fmt.Errorf(
            "invalid value for {{ .Type }}: %s (one of %s expected)",
            {{.ConvertToString}}{{ .First }}{{ .ConvertToStringEnd }},
            strings.Join(
                []string{
{{ $root := . }}{{ range $val := .Values }}                {{ $root.ConvertToString }}{{ $val }}{{ $root.ConvertToStringEnd }},
{{ end }}                },
                ", ",
            ),
        )
    }
    return nil
}
{{- if and (eq .Spec.GenerateJSON true) (ne .RawType "") }}
// UnmarshalJSON unmarshalls a JSON-encoded value and validates it against valid enum values.
func ({{ .First }} *{{ .Type }}) UnmarshalJSON(data []byte) error {
    var raw {{ .RawType }}
    if err := json.Unmarshal(data, &raw); err != nil {
        return err
    }
    var targetType {{ .Type }}
    targetType = {{ .Type }}(raw)
    if err := targetType.Validate(); err != nil {
        return err
    }
    *{{ .First }} = targetType
    return nil
}
{{- end }}
{{- end }}

{{ if .Spec.GenerateListType -}}
// {{ .Type }}s is a list of {{ .Type }}.
type {{ .Type }}s []{{ .Type }}

{{ if .Spec.GenerateValidate -}}
// Validate validates a list of {{ .Type }}s.
func ({{ .First }} {{ .Type }}s) Validate() error {
    for i, v := range {{ .First }} {
        if err := v.Validate(); err != nil {
            return fmt.Errorf(
                "item %d in list is not valid: %v (%w)",
                i,
                v,
                err,
            )
        }
    }
    return nil
}
{{- end }}
{{- end }}